version: '3.8'

services:

  resource-server:
    container_name: resource-server
    build:
      context: ./resources
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    depends_on:
      keycloak:
        condition: service_healthy
      postgres:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=postgres
      - KEYCLOAK_JWK_SET_URL=http://keycloak:8080/realms/what-if/protocol/openid-connect/certs
      - KEYCLOAK_ALLOWED_ISSUERS=http://keycloak:8080/realms/what-if,http://127.0.0.1:8080/realms/what-if
    networks:
      - app-network

  keycloak:
    image: quay.io/keycloak/keycloak:26.2.5-0
    container_name: keycloak
    command: start-dev --import-realm
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_HEALTH_ENABLED=true
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
    ports:
      - "8080:8080"
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { java.net.URI uri = java.net.URI.create(args[0]); System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)uri.toURL().openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:9000/health/live']
      interval: 5s
      timeout: 5s
      retries: 30
    depends_on:
      - postgres

  postgres:
    image: postgres:16
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      - backend
    stdin_open: true
    tty: true
    environment:
      - EXPO_DEVTOOLS_LISTEN_ADDRESS=0.0.0.0
    networks:
      - app-network

  backend:
    container_name: backend
    build:
      context: ./app
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    depends_on:
      - resource-server
      - nginx
    environment:
      - SPRING_PROFILES_ACTIVE=postgres
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    container_name: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "8084:8084"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
